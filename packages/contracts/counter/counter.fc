#include "stdlib.fc";

(int) load_data() inline {                 ;; read function declaration - returns int as result
  var ds = get_data().begin_parse();       ;; load the storage cell and start parsing as a slice
  return (ds~load_uint(64));               ;; read a 64 bit unsigned int from the slice and return it
}

() save_data(int counter) impure inline {  ;; write function declaration - takes an int as arg
  set_data(begin_cell()                    ;; store the storage cell and create it with a builder 
    .store_uint(counter, 64)               ;; write a 64 bit unsigned int to the builder
    .end_cell());                          ;; convert the builder to a cell
}

() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {  ;; well known function signature
  ;; ~dump(msg_value);
  if (in_msg_body.slice_empty?()) {         ;; check if incoming message is empty (with no body)
    return ();                              ;; return successfully and accept an empty message
  }
  int op = in_msg_body~load_uint(32);       ;; parse the operation type encoded in the beginning of msg body
  _ = in_msg_body~load_uint(64);            ;; discard query id
  var (counter) = load_data();              ;; call our read utility function to load values from storage
  if (op == 1) {                            ;; handle op #1 = increment
    ;; ~strdump("increment received"); 
    save_data(counter + 1);                 ;; call our write utility function to persist values to storage
  }

  if (op == 2) {
    ;; ~strdump("decrement received"); 
    save_data(counter - 1);
  }

  if (op == 3) {
    ;; ~strdump("add number received"); 
    int change = in_msg_body~load_int(32);
    save_data(counter + change);
  }

  if (op == 4) {
    var cs = in_msg.begin_parse();
    int flags = cs~load_uint(4);  ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
    ~strdump("return ton balance of smart contract to owner"); 
    [int my_balance, _] = get_balance();
    ~dump(my_balance);
    my_balance -= 20600000;
    ~dump(my_balance);
    ;; throw_unless(80, my_balance - msg_value >= 10000000); ;; insufficent founds
    slice s_addr = cs~load_msg_addr();
    slice message_body = "Fund back from counter";
    cell msg = begin_cell()
      .store_uint(0x18, 6)
      .store_slice(s_addr)
      .store_coins(my_balance)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_slice(message_body)
    .end_cell();
    send_raw_message(msg, 2);
  }
  
}

int counter() method_id {        ;; getter declaration - returns int as result
  var (counter) = load_data();   ;; call our read utility function to load value
  return counter;
}

int balance() method_id {        ;; getter declaration - returns int as result
  [int my_balance, _] = get_balance();   ;; call our read utility function to load value
  return my_balance;
}
